apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.rui.jekinsdemo"
        minSdkVersion 24
        targetSdkVersion 27
        versionCode 1
        versionName getAppVersionNamefromTag()
        flavorDimensions "channel"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {}
        release {
            storeFile file("../../keys/release")
            storePassword "123456"
            keyAlias "liumingrui"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            multiDexEnabled true
        }
        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        qa{
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        main {
            dimension "channel"
        }
        xiaomi {
            dimension "channel"
        }
        huawei {
            dimension "channel"
        }
    }
    applicationVariants.all {
        def buildType = BUILD_TYPE
        if(BUILD_TYPE?.trim()) {
            buildType = it.buildType.name
        }

        def channel = PRODUCT_FLAVORS
        if(PRODUCT_FLAVORS?.trim()) {
            channel = it.productFlavors[0].name
        }

        def createTime = BUILD_TIME
        if (createTime?.trim()) {
            createTime = buildTime()
        }

        if (buildType == "release") {
            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks/")
        }

        def fileName
        it.outputs.each {
            fileName = "${channel}_${createTime}_${buildType}.apk"
            it.outputFileName = fileName
        }
    }

    compileOptions {
        encoding = 'utf-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def buildTime() {
    return new Date().format("yyyy_MM_dd_HH:mm", TimeZone.getTimeZone("GMT+08:00"))
}

def getAppVersionNamefromTag() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git','describe','--abbrev=0','--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:2.0.0-alpha1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true;
    }
}
